<?xml version="1.0"?>
<ruleset name="ConnectNG">
    <description>The Connect Nigeria Development Standards</description>

    <file>app</file>
    <file>config</file>
    <file>database</file>
    <file>public</file>
    <file>resources</file>
    <file>routes</file>
    <file>tests</file>

    <exclude-pattern>*/cache/*</exclude-pattern>
    <exclude-pattern>*/*.js</exclude-pattern>
    <exclude-pattern>*/*.css</exclude-pattern>
    <exclude-pattern>*/*.xml</exclude-pattern>
    <exclude-pattern>*/autoload.php</exclude-pattern>
    <exclude-pattern>*/storage/*</exclude-pattern>
    <exclude-pattern>*/public/index.php</exclude-pattern>
    <exclude-pattern>*/*.blade.php</exclude-pattern>

    <!-- See https://gist.github.com/topazas/057ef1cf4fd412e8c8e866e5ba5119bc -->
    <!-- See http://edorian.github.io/php-coding-standard-generator/#phpcs -->

    <!-- Ensure that there are no spaces around square brackets. -->
    <rule ref="Squiz.Arrays.ArrayBracketSpacing" />

    <!-- Bans the use of the PHP long array syntax. -->
    <rule ref="Generic.Arrays.DisallowLongArraySyntax" />

    <!-- Checks the declaration of the class and its inheritance is correct. -->
    <rule ref="Squiz.Classes.ClassDeclaration" />

    <!-- Tests that the file name and the name of the class contained within the file match. -->
    <rule ref="Squiz.Classes.ClassFileName" />

    <!-- Verifies that properties are declared correctly. -->
    <rule ref="PSR2.Classes.PropertyDeclaration" />

    <!-- Ensures classes are in camel caps, and the first letter is capitalised. -->
    <rule ref="Squiz.Classes.ValidClassName" />

    <!-- This sniff class detected empty statement. -->
    <rule ref="Generic.CodeAnalysis.EmptyStatement" />

    <!-- Reports errors if the same class or interface name is used in multiple files. -->
    <rule ref="Generic.Classes.DuplicateClassName" />

    <!-- Detects for-loops that can be simplified to a while-loop. -->
    <rule ref="Generic.CodeAnalysis.ForLoopShouldBeWhileLoop" />

    <!-- Detects for-loops that use a function call in the test expression. -->
    <rule ref="Generic.CodeAnalysis.ForLoopWithTestFunctionCall" />

    <!-- Detects incrementer jumbling in for loops. -->
    <rule ref="Generic.CodeAnalysis.JumbledIncrementer" />

    <!-- Detects unconditional if- and elseif-statements. -->
    <rule ref="Generic.CodeAnalysis.UnconditionalIfStatement" />

    <!-- Detects unnecessary final modifiers inside of final classes. -->
    <rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier" />

    <!-- Checks the for unused function parameters. -->
    <rule ref="Generic.CodeAnalysis.UnusedFunctionParameter" />

    <!-- Detects unnecessary overridden methods that simply call their parent. -->
    <rule ref="Generic.CodeAnalysis.UselessOverridingMethod" />

    <!-- Verifies that block comments are used appropriately. -->
    <rule ref="Squiz.Commenting.BlockComment" />

    <!-- Warns about FIXME comments. -->
    <rule ref="Generic.Commenting.Fixme" />

    <!-- Warns about TODO comments. -->
    <rule ref="Generic.Commenting.Todo" />

    <!-- Verifies that a @throws tag exists for each exception type a function throws. -->
    <rule ref="Squiz.Commenting.FunctionCommentThrowTag" />

    <!-- Checks that there is adequate spacing between comments. -->
    <rule ref="Squiz.Commenting.InlineComment" />

    <!-- Verifies that control statements conform to their coding standards. -->
    <rule ref="Squiz.ControlStructures.ControlSignature" />

    <!-- Checks that control structures have the correct spacing around brackets. -->
    <rule ref="PSR2.ControlStructures.ControlStructureSpacing" />

    <!-- Checks that only one class is declared per file. -->
    <rule ref="Generic.Files.OneClassPerFile" />

    <!-- Checks that only one interface is declared per file. -->
    <rule ref="Generic.Files.OneInterfacePerFile" />

    <!-- Checks that only one trait is declared per file. -->
    <rule ref="Generic.Files.OneTraitPerFile" />

    <!-- Ensures there is a single space after cast tokens. -->
    <rule ref="Generic.Formatting.SpaceAfterCast" />

    <!-- Checks the nesting level for methods. -->
    <rule ref="Generic.Metrics.NestingLevel">
        <properties>
            <property name="nestingLevel" value="10" />
            <property name="absoluteNestingLevel" value="30" />
        </properties>
    </rule>

    <!-- Ensures namespaces are declared correctly. -->
    <rule ref="PSR2.Namespaces.NamespaceDeclaration" />

    <!-- Ensures USE blocks are declared correctly. -->
    <rule ref="PSR2.Namespaces.UseDeclaration" />

    <!-- Ensures that constant names are all uppercase. -->
    <rule ref="Generic.NamingConventions.UpperCaseConstantName" />

    <!-- Discourages the use of deprecated PHP functions. -->
    <rule ref="Generic.PHP.DeprecatedFunctions" />

    <!-- Throws an error or warning when any code prefixed with an asperand is encountered. -->
    <rule ref="Generic.PHP.NoSilencedErrors" />

    <!-- Ensures that eval() is not used to create objects. -->
    <rule ref="MySource.PHP.EvalObjectFactory" />

    <!-- Discourages the use of alias functions. -->
    <rule ref="Generic.PHP.ForbiddenFunctions" />

    <!-- Bans PHP 4 style constructors. -->
    <rule ref="Generic.NamingConventions.ConstructorName" />

    <!-- Makes sure that shorthand PHP open tags are not used. -->
    <rule ref="Generic.PHP.DisallowShortOpenTag" />

    <!-- Checks the cyclomatic complexity (McCabe) for functions. -->
    <rule ref="Generic.Metrics.CyclomaticComplexity">
        <properties>
            <property name="complexity" value="50" />
            <property name="absoluteComplexity" value="100" />
        </properties>
    </rule>

    <!-- Ensures that variables are not passed by reference when calling a function. -->
    <rule ref="Generic.Functions.CallTimePassByReference" />

    <!-- Checks that calls to methods and functions are spaced correctly. -->
    <rule ref="Generic.Functions.FunctionCallArgumentSpacing" />

    <!-- Checks that the opening brace of a function is on the line after the function declaration. -->
    <rule ref="Generic.Functions.OpeningFunctionBraceBsdAllman" />

    <!-- A simple sniff for detecting BOMs that may corrupt application work. -->
    <rule ref="Generic.Files.ByteOrderMark"/>

    <arg name="colors" />

    <rule ref="PSR12" />
</ruleset>
